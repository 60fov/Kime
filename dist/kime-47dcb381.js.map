{"version":3,"file":"kime-47dcb381.js","sources":["../src/kime/keylayout.ts","../src/kime/util.ts","../src/kime/jamo.ts","../src/kime.ts"],"sourcesContent":["// TODO: types\n// type LayoutGroup = ... (qwerty)\n// type Layout = ... (sebeolsik)\n\n// TODO: add layouts\n// each layout is ordered by rows grouped by caps\nexport const layout = {\n    qwerty: {\n        sebeolsik: {\n            // duping feels less gross than performing two lookups for a miss (see keyLookUp fn)\n            // or a reverse map whic seems less gross than the former but still too complex for no gain\n            \"Q\": \"ㅃ\", \"W\": \"ㅉ\", \"E\": \"ㄸ\", \"R\": \"ㄲ\", \"T\": \"ㅆ\", \"Y\": \"ㅛ\", \"U\": \"ㅕ\", \"I\": \"ㅑ\", \"O\": \"ㅒ\", \"P\": \"ㅖ\",\n            \"A\": \"ㅁ\", \"S\": \"ㄴ\", \"D\": \"ㅇ\", \"F\": \"ㄹ\", \"G\": \"ㅎ\", \"H\": \"ㅗ\", \"J\": \"ㅓ\", \"K\": \"ㅏ\", \"L\": \"ㅣ\",\n            \"Z\": \"ㅋ\", \"X\": \"ㅌ\", \"C\": \"ㅊ\", \"V\": \"ㅍ\", \"B\": \"ㅠ\", \"N\": \"ㅜ\", \"M\": \"ㅡ\",\n\n            \"q\": \"ㅂ\", \"w\": \"ㅈ\", \"e\": \"ㄷ\", \"r\": \"ㄱ\", \"t\": \"ㅅ\", \"y\": \"ㅛ\", \"u\": \"ㅕ\", \"i\": \"ㅑ\", \"o\": \"ㅐ\", \"p\": \"ㅔ\",\n            \"a\": \"ㅁ\", \"s\": \"ㄴ\", \"d\": \"ㅇ\", \"f\": \"ㄹ\", \"g\": \"ㅎ\", \"h\": \"ㅗ\", \"j\": \"ㅓ\", \"k\": \"ㅏ\", \"l\": \"ㅣ\",\n            \"z\": \"ㅋ\", \"x\": \"ㅌ\", \"c\": \"ㅊ\", \"v\": \"ㅍ\", \"b\": \"ㅠ\", \"n\": \"ㅜ\", \"m\": \"ㅡ\",\n\n            // \" \": \" \" // this one went crazy, rip, Sat Dec 3:17, qq\n        }\n    }\n} // as const\n/*\nusage e.g.\nconst keymap = layout.qwerty.sebeolsik\nkeymap['P']\n*/\n\n// TODO: learn ts\nexport type EnLayout = \"qwerty\"\nexport type KrLayout = \"sebeolsik\"\n\n\n// TODO: fix undefined lookup\nexport function getKeymap(enLayout: EnLayout, krLayout: KrLayout) {\n    return (layout as any)[enLayout][krLayout] // as { [key: string]: string }\n}\n\n// TODO: add state for default layouts(?) (see hook)\nexport function keyLookUp(key: string, en: EnLayout = \"qwerty\", kr: KrLayout = \"sebeolsik\") {\n    return getKeymap(en, kr)[key] as string | undefined // || getKeymap(en, kr)[key.toLowerCase()]\n}","export function buffer<T>([...data]: T[]) {\n    return {\n        data: () => data,\n        isEmpty: () => data.length == 0,\n        consume: () => data.shift(),\n        peek: (i = 1) => data.length > i - 1 ? data[i - 1] : undefined\n    }\n}","import { buffer } from \"./util\"\n\n// TODO: double type option for doubles (ㅃㅉㄸㄲㅆ)\n// TODO: switch to bi directional maps\n\nexport const jamo = {\n    single: [\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ',\n        'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ',\n        'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ',\n        'ㅗ', 'ㅛ', 'ㅜ', 'ㅠ', 'ㅡ', 'ㅣ'\n    ],\n    initial: [\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ',\n        'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\n    ],\n    medial: [\n        'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ',\n        'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ',\n        'ㅛ',\n        'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',\n        'ㅠ',\n        'ㅡ', 'ㅢ',\n        'ㅣ'\n    ],\n    final: [\n        'ㄱ', 'ㄲ', 'ㄳ',\n        'ㄴ', 'ㄵ', 'ㄶ',\n        'ㄷ',\n        'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\n        'ㅁ',\n        'ㅂ', 'ㅄ',\n        'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ',\n    ],\n    decompositionMaps: {\n        'ㅘ': ['ㅗ', 'ㅏ'],\n        'ㅙ': ['ㅗ', 'ㅐ'],\n        'ㅚ': ['ㅗ', 'ㅣ'],\n        'ㅝ': ['ㅜ', 'ㅓ'],\n        'ㅞ': ['ㅜ', 'ㅔ'],\n        'ㅟ': ['ㅜ', 'ㅣ'],\n        'ㅢ': ['ㅡ', 'ㅣ'],\n        'ㄳ': ['ㄱ', 'ㅅ'],\n        'ㄵ': ['ㄴ', 'ㅈ'],\n        'ㄶ': ['ㄴ', 'ㅎ'],\n        'ㄺ': ['ㄹ', 'ㄱ'],\n        'ㄻ': ['ㄹ', 'ㅁ'],\n        'ㄼ': ['ㄹ', 'ㅂ'],\n        'ㄽ': ['ㄹ', 'ㅅ'],\n        'ㄾ': ['ㄹ', 'ㅌ'],\n        'ㄿ': ['ㄹ', 'ㅍ'],\n        'ㅀ': ['ㄹ', 'ㅎ'],\n        'ㅄ': ['ㅂ', 'ㅅ'],\n    },\n    complexMaps: {\n        'ㅗ': {\n            'ㅏ': 'ㅘ',\n            'ㅐ': 'ㅙ',\n            'ㅣ': 'ㅚ'\n        },\n        'ㅜ': {\n            'ㅓ': 'ㅝ',\n            'ㅔ': 'ㅞ',\n            'ㅣ': 'ㅟ'\n        },\n        'ㅡ': {\n            'ㅣ': 'ㅢ'\n        },\n        'ㄱ': {\n            'ㅅ': 'ㄳ'\n        },\n        'ㄴ': {\n            'ㅈ': 'ㄵ',\n            'ㅎ': 'ㄶ'\n        },\n        'ㄹ': {\n            'ㄱ': 'ㄺ',\n            'ㅁ': 'ㄻ',\n            'ㅂ': 'ㄼ',\n            'ㅅ': 'ㄽ',\n            'ㅌ': 'ㄾ',\n            'ㅍ': 'ㄿ',\n            'ㅎ': 'ㅀ',\n        },\n        'ㅂ': {\n            'ㅅ': 'ㅄ'\n        }\n    }\n}\n\nfunction isInitialJamo(j: string) {\n    return jamo.initial.includes(j)\n}\n\nfunction isMedialJamo(j: string) {\n    return jamo.medial.includes(j)\n}\n\nfunction isFinalJamo(j: string) {\n    return jamo.final.includes(j)\n}\n\nfunction initialJamoOffset(j: string) {\n    return jamo.initial.indexOf(j)\n}\n\nfunction medialJamoOffset(j: string) {\n    return jamo.medial.indexOf(j)\n}\n\nfunction finalJamoOffset(j: string) {\n    return jamo.final.indexOf(j)\n}\n\nfunction composeJamo(prefix: string, postfix: string) {\n    if (prefix === undefined) return undefined\n    if (postfix === undefined) return undefined\n    const prefixMap = (jamo.complexMaps as any)[prefix]\n    if (prefixMap === undefined) return undefined\n    const complex = prefixMap[postfix]\n    if (complex === undefined) return undefined\n    return prefixMap[postfix]\n}\n\nfunction composeSyllable(initial: string, medial: string, final?: string) {\n    const i = initialJamoOffset(initial)\n    const m = medialJamoOffset(medial)\n    const f = final ? finalJamoOffset(final) + 1 : 0\n\n    const c = (i * 588 + m * 28 + f) + 0xac00\n    return 0xac00 <= c && c <= 0xD7A3 ? String.fromCodePoint(c) : undefined\n}\n\nconst composeBlock = (input: string | string[]) => {\n    const data = Array.isArray(input) ? [...input] : input.split(\"\")\n\n    let i: string | undefined = undefined\n    let m: string | undefined = undefined\n    let f: string | undefined = undefined\n    let cc: string | undefined = undefined\n\n    const buf = buffer(data)\n    while (!buf.isEmpty()) {\n        const p = buf.peek()!\n        if (i === undefined) {\n            if (isInitialJamo(p)) {\n                const p2 = buf.peek(2)\n                if (p2 === undefined) break\n                if (!isMedialJamo(p2)) {\n                    cc = buf.consume()\n                    break\n                }\n                i = buf.consume()\n                continue\n            }\n            if (isMedialJamo(p)) {\n                const p2 = buf.peek(2)\n                if (p2 === undefined) break\n                cc = buf.consume()\n                const cm = composeJamo(p, p2)\n                if (cm === undefined) break\n                cc = cm\n                buf.consume()\n                break\n            }\n        }\n\n        if (m === undefined) {\n            if (isMedialJamo(p)) {\n                const c = buf.consume()!\n                const p = buf.peek()\n                if (p === undefined) {\n                    m = c\n                    break\n                }\n                const cm = composeJamo(c, p)\n                if (cm) {\n                    buf.consume()\n                    m = cm\n                    continue // ?\n                }\n                m = c\n                continue\n            }\n            break\n        }\n\n        if (f === undefined) {\n            if (!isFinalJamo(p)) break\n            const p2 = buf.peek(2)\n            if (p2 === undefined) {\n                f = buf.consume()\n                break\n            }\n            const cf = composeJamo(p, p2)\n            if (cf) {\n                const p3 = buf.peek(3)\n                const c = buf.consume()\n                if (p3 && isMedialJamo(p3)) {\n                    f = c\n                    break // recursion??\n                }\n                f = cf\n                buf.consume()\n                break\n            }\n            if (isMedialJamo(p2)) break\n            f = buf.consume()\n            break\n        }\n    }\n\n    // deductive logic\n    if (cc) return [cc, ...buf.data()]\n\n    if (i && m) {\n        const syl = composeSyllable(i, m, f)\n        // TODO: consider throwing error (or alt fn that does)\n        if (syl === undefined) return ['']\n        if (buf.isEmpty()) return [syl]\n        return [syl, ...buf.data()]\n    }\n\n    if (buf.isEmpty()) return ['']\n\n    return [...buf.data()]\n}\n\n// TODO: dunno how I feel about this, promise version?\nconst compose = (blocks: string[], maxIterations = 1000) => {\n    let result: string[] = []\n    let b = blocks\n    let i = 0\n    while (b.length) {\n        i++\n        if (i > maxIterations) break\n        const [block, ...rest] = composeBlock(b)\n        result.push(block)\n        b = rest\n    }\n    return result\n}\n\nconst decomposeCompatibilityJamo = (cjamo: string) => {\n    return (jamo.decompositionMaps as any)[cjamo] as string[] | undefined\n}\n\nconst decomposeBlock = (block: string) => {\n    const code = block.charCodeAt(0)\n    if (0xac00 <= code && code <= 0xD7A3) {\n        const c = code - 0xac00\n        const fc = c % 28\n        const i = Math.floor(c / 588)\n        const m = (c - fc) % 588 / 28\n        const f = fc ? fc - 1 : undefined\n\n        const initial = jamo.initial[i]\n\n        const decomposedMedial = decomposeCompatibilityJamo(jamo.medial[m])\n        const medial = decomposedMedial ?? [jamo.medial[m]]\n\n        if (f !== undefined) {\n            const decomposedFinal = decomposeCompatibilityJamo(jamo.final[f])\n            const final = decomposedFinal ?? [jamo.final[f]]\n\n            return [initial, ...medial, ...final]\n        }\n        return [initial, ...medial]\n    }\n\n    const decomposedCompatibilityJamo = decomposeCompatibilityJamo(block)\n    return decomposedCompatibilityJamo ?? [block]\n}\n\nconst decompose = (blocks: string) => {\n    let result: string[] = []\n    for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i]\n        result.push(...decomposeBlock(block))\n    }\n    return result\n}\n\nexport {\n    isInitialJamo, isMedialJamo, isFinalJamo,\n    initialJamoOffset, medialJamoOffset, finalJamoOffset,\n    composeJamo, composeSyllable, composeBlock, compose,\n    decomposeCompatibilityJamo, decomposeBlock, decompose\n}","import { keyLookUp, getKeymap } from '~/kime/keylayout'\n\nimport {\n    isInitialJamo, isMedialJamo, isFinalJamo,\n    initialJamoOffset, medialJamoOffset, finalJamoOffset,\n    composeJamo, composeSyllable, composeBlock, compose,\n    decomposeCompatibilityJamo, decomposeBlock, decompose\n} from '~/kime/jamo'\n\nconst kime = {\n    keyLookUp,\n    key: keyLookUp,\n    getKeymap,\n    isInitialJamo, isMedialJamo, isFinalJamo,\n    initialJamoOffset, medialJamoOffset, finalJamoOffset,\n    composeJamo, composeSyllable, composeBlock, compose,\n    decomposeCompatibilityJamo, decomposeBlock, decompose\n}\n\nexport default kime\n\n/* TODO consider group access \n    kime.key...\n    kime.jamo...\n*/"],"names":["layout","getKeymap","enLayout","krLayout","keyLookUp","key","en","kr","buffer","data","jamo","isInitialJamo","j","isMedialJamo","isFinalJamo","initialJamoOffset","medialJamoOffset","finalJamoOffset","composeJamo","prefix","postfix","prefixMap","composeSyllable","initial","medial","final","i","m","c","composeBlock","input","f","cc","buf","p","p2","cm","cf","p3","syl","compose","blocks","maxIterations","result","b","block","rest","decomposeCompatibilityJamo","cjamo","decomposeBlock","code","fc","decompose","kime"],"mappings":"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"}