{"version":3,"file":"kime-747d8327.cjs","sources":["../src/kime/keylayout.ts","../src/kime/util.ts","../src/kime/jamo.ts","../src/kime.ts"],"sourcesContent":["// TODO: types\n// type LayoutGroup = ... (qwerty)\n// type Layout = ... (sebeolsik)\n\n// TODO: add layouts\n// each layout is ordered by rows grouped by caps\nexport const layout = {\n    qwerty: {\n        sebeolsik: {\n            // duping feels less gross than performing two lookups for a miss (see keyLookUp fn)\n            // or a reverse map whic seems less gross than the former but still too complex for no gain\n            \"Q\": \"ㅃ\", \"W\": \"ㅉ\", \"E\": \"ㄸ\", \"R\": \"ㄲ\", \"T\": \"ㅆ\", \"Y\": \"ㅛ\", \"U\": \"ㅕ\", \"I\": \"ㅑ\", \"O\": \"ㅒ\", \"P\": \"ㅖ\",\n            \"A\": \"ㅁ\", \"S\": \"ㄴ\", \"D\": \"ㅇ\", \"F\": \"ㄹ\", \"G\": \"ㅎ\", \"H\": \"ㅗ\", \"J\": \"ㅓ\", \"K\": \"ㅏ\", \"L\": \"ㅣ\",\n            \"Z\": \"ㅋ\", \"X\": \"ㅌ\", \"C\": \"ㅊ\", \"V\": \"ㅍ\", \"B\": \"ㅠ\", \"N\": \"ㅜ\", \"M\": \"ㅡ\",\n\n            \"q\": \"ㅂ\", \"w\": \"ㅈ\", \"e\": \"ㄷ\", \"r\": \"ㄱ\", \"t\": \"ㅅ\", \"y\": \"ㅛ\", \"u\": \"ㅕ\", \"i\": \"ㅑ\", \"o\": \"ㅐ\", \"p\": \"ㅔ\",\n            \"a\": \"ㅁ\", \"s\": \"ㄴ\", \"d\": \"ㅇ\", \"f\": \"ㄹ\", \"g\": \"ㅎ\", \"h\": \"ㅗ\", \"j\": \"ㅓ\", \"k\": \"ㅏ\", \"l\": \"ㅣ\",\n            \"z\": \"ㅋ\", \"x\": \"ㅌ\", \"c\": \"ㅊ\", \"v\": \"ㅍ\", \"b\": \"ㅠ\", \"n\": \"ㅜ\", \"m\": \"ㅡ\",\n\n            // \" \": \" \" // this one went crazy, rip, Sat Dec 3:17, qq\n        }\n    }\n} // as const\n/*\nusage e.g.\nconst keymap = layout.qwerty.sebeolsik\nkeymap['P']\n*/\n\n// TODO: learn ts\nexport type EnLayout = \"qwerty\"\nexport type KrLayout = \"sebeolsik\"\n\n\n// TODO: fix undefined lookup\nexport function getKeymap(enLayout: EnLayout, krLayout: KrLayout) {\n    return (layout as any)[enLayout][krLayout] // as { [key: string]: string }\n}\n\n// TODO: add state for default layouts(?) (see hook)\nexport function keyLookUp(key: string, en: EnLayout = \"qwerty\", kr: KrLayout = \"sebeolsik\") {\n    return getKeymap(en, kr)[key] as string | undefined // || getKeymap(en, kr)[key.toLowerCase()]\n}","export function buffer<T>([...data]: T[]) {\n    return {\n        data: () => data,\n        isEmpty: () => data.length == 0,\n        consume: () => data.shift(),\n        peek: (i = 1) => data.length > i - 1 ? data[i - 1] : undefined\n    }\n}","import { buffer } from \"./util\"\n\n// TODO: double type option for doubles (ㅃㅉㄸㄲㅆ)\n// TODO: switch to bi directional maps\n\nexport const jamo = {\n    single: [\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ',\n        'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ',\n        'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ',\n        'ㅗ', 'ㅛ', 'ㅜ', 'ㅠ', 'ㅡ', 'ㅣ'\n    ],\n    initial: [\n        'ㄱ', 'ㄲ', 'ㄴ', 'ㄷ', 'ㄸ', 'ㄹ', 'ㅁ', 'ㅂ', 'ㅃ', 'ㅅ',\n        'ㅆ', 'ㅇ', 'ㅈ', 'ㅉ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ'\n    ],\n    medial: [\n        'ㅏ', 'ㅐ', 'ㅑ', 'ㅒ', 'ㅓ', 'ㅔ', 'ㅕ', 'ㅖ',\n        'ㅗ', 'ㅘ', 'ㅙ', 'ㅚ',\n        'ㅛ',\n        'ㅜ', 'ㅝ', 'ㅞ', 'ㅟ',\n        'ㅠ',\n        'ㅡ', 'ㅢ',\n        'ㅣ'\n    ],\n    final: [\n        'ㄱ', 'ㄲ', 'ㄳ',\n        'ㄴ', 'ㄵ', 'ㄶ',\n        'ㄷ',\n        'ㄹ', 'ㄺ', 'ㄻ', 'ㄼ', 'ㄽ', 'ㄾ', 'ㄿ', 'ㅀ',\n        'ㅁ',\n        'ㅂ', 'ㅄ',\n        'ㅅ', 'ㅆ', 'ㅇ', 'ㅈ', 'ㅊ', 'ㅋ', 'ㅌ', 'ㅍ', 'ㅎ',\n    ],\n    decompositionMaps: {\n        'ㅘ': ['ㅗ', 'ㅏ'],\n        'ㅙ': ['ㅗ', 'ㅐ'],\n        'ㅚ': ['ㅗ', 'ㅣ'],\n        'ㅝ': ['ㅜ', 'ㅓ'],\n        'ㅞ': ['ㅜ', 'ㅔ'],\n        'ㅟ': ['ㅜ', 'ㅣ'],\n        'ㅢ': ['ㅡ', 'ㅣ'],\n        'ㄳ': ['ㄱ', 'ㅅ'],\n        'ㄵ': ['ㄴ', 'ㅈ'],\n        'ㄶ': ['ㄴ', 'ㅎ'],\n        'ㄺ': ['ㄹ', 'ㄱ'],\n        'ㄻ': ['ㄹ', 'ㅁ'],\n        'ㄼ': ['ㄹ', 'ㅂ'],\n        'ㄽ': ['ㄹ', 'ㅅ'],\n        'ㄾ': ['ㄹ', 'ㅌ'],\n        'ㄿ': ['ㄹ', 'ㅍ'],\n        'ㅀ': ['ㄹ', 'ㅎ'],\n        'ㅄ': ['ㅂ', 'ㅅ'],\n    },\n    complexMaps: {\n        'ㅗ': {\n            'ㅏ': 'ㅘ',\n            'ㅐ': 'ㅙ',\n            'ㅣ': 'ㅚ'\n        },\n        'ㅜ': {\n            'ㅓ': 'ㅝ',\n            'ㅔ': 'ㅞ',\n            'ㅣ': 'ㅟ'\n        },\n        'ㅡ': {\n            'ㅣ': 'ㅢ'\n        },\n        'ㄱ': {\n            'ㅅ': 'ㄳ'\n        },\n        'ㄴ': {\n            'ㅈ': 'ㄵ',\n            'ㅎ': 'ㄶ'\n        },\n        'ㄹ': {\n            'ㄱ': 'ㄺ',\n            'ㅁ': 'ㄻ',\n            'ㅂ': 'ㄼ',\n            'ㅅ': 'ㄽ',\n            'ㅌ': 'ㄾ',\n            'ㅍ': 'ㄿ',\n            'ㅎ': 'ㅀ',\n        },\n        'ㅂ': {\n            'ㅅ': 'ㅄ'\n        }\n    }\n}\n\nfunction isInitialJamo(j: string) {\n    return jamo.initial.includes(j)\n}\n\nfunction isMedialJamo(j: string) {\n    return jamo.medial.includes(j)\n}\n\nfunction isFinalJamo(j: string) {\n    return jamo.final.includes(j)\n}\n\nfunction initialJamoOffset(j: string) {\n    return jamo.initial.indexOf(j)\n}\n\nfunction medialJamoOffset(j: string) {\n    return jamo.medial.indexOf(j)\n}\n\nfunction finalJamoOffset(j: string) {\n    return jamo.final.indexOf(j)\n}\n\nfunction composeJamo(prefix: string, postfix: string) {\n    if (prefix === undefined) return undefined\n    if (postfix === undefined) return undefined\n    const prefixMap = (jamo.complexMaps as any)[prefix]\n    if (prefixMap === undefined) return undefined\n    const complex = prefixMap[postfix]\n    if (complex === undefined) return undefined\n    return prefixMap[postfix]\n}\n\nfunction composeSyllable(initial: string, medial: string, final?: string) {\n    const i = initialJamoOffset(initial)\n    const m = medialJamoOffset(medial)\n    const f = final ? finalJamoOffset(final) + 1 : 0\n\n    const c = (i * 588 + m * 28 + f) + 0xac00\n    return 0xac00 <= c && c <= 0xD7A3 ? String.fromCodePoint(c) : undefined\n}\n\nconst composeBlock = (input: string | string[]) => {\n    const data = Array.isArray(input) ? [...input] : input.split(\"\")\n\n    let i: string | undefined = undefined\n    let m: string | undefined = undefined\n    let f: string | undefined = undefined\n    let cc: string | undefined = undefined\n\n    const buf = buffer(data)\n    while (!buf.isEmpty()) {\n        const p = buf.peek()!\n        if (i === undefined) {\n            if (isInitialJamo(p)) {\n                const p2 = buf.peek(2)\n                if (p2 === undefined) break\n                if (!isMedialJamo(p2)) {\n                    cc = buf.consume()\n                    break\n                }\n                i = buf.consume()\n                continue\n            }\n            if (isMedialJamo(p)) {\n                const p2 = buf.peek(2)\n                if (p2 === undefined) break\n                cc = buf.consume()\n                const cm = composeJamo(p, p2)\n                if (cm === undefined) break\n                cc = cm\n                buf.consume()\n                break\n            }\n        }\n\n        if (m === undefined) {\n            if (isMedialJamo(p)) {\n                const c = buf.consume()!\n                const p = buf.peek()\n                if (p === undefined) {\n                    m = c\n                    break\n                }\n                const cm = composeJamo(c, p)\n                if (cm) {\n                    buf.consume()\n                    m = cm\n                    continue // ?\n                }\n                m = c\n                continue\n            }\n            break\n        }\n\n        if (f === undefined) {\n            if (!isFinalJamo(p)) break\n            const p2 = buf.peek(2)\n            if (p2 === undefined) {\n                f = buf.consume()\n                break\n            }\n            const cf = composeJamo(p, p2)\n            if (cf) {\n                const p3 = buf.peek(3)\n                const c = buf.consume()\n                if (p3 && isMedialJamo(p3)) {\n                    f = c\n                    break // recursion??\n                }\n                f = cf\n                buf.consume()\n                break\n            }\n            if (isMedialJamo(p2)) break\n            f = buf.consume()\n            break\n        }\n    }\n\n    // deductive logic\n    if (cc) return [cc, ...buf.data()]\n\n    if (i && m) {\n        const syl = composeSyllable(i, m, f)\n        // TODO: consider throwing error (or alt fn that does)\n        if (syl === undefined) return ['']\n        if (buf.isEmpty()) return [syl]\n        return [syl, ...buf.data()]\n    }\n\n    if (buf.isEmpty()) return ['']\n\n    return [...buf.data()]\n}\n\n// TODO: dunno how I feel about this, promise version?\nconst compose = (blocks: string[], maxIterations = 1000) => {\n    let result: string[] = []\n    let b = blocks\n    let i = 0\n    while (b.length) {\n        i++\n        if (i > maxIterations) break\n        const [block, ...rest] = composeBlock(b)\n        result.push(block)\n        b = rest\n    }\n    return result\n}\n\nconst decomposeCompatibilityJamo = (cjamo: string) => {\n    return (jamo.decompositionMaps as any)[cjamo] as string[] | undefined\n}\n\nconst decomposeBlock = (block: string) => {\n    const code = block.charCodeAt(0)\n    if (0xac00 <= code && code <= 0xD7A3) {\n        const c = code - 0xac00\n        const fc = c % 28\n        const i = Math.floor(c / 588)\n        const m = (c - fc) % 588 / 28\n        const f = fc ? fc - 1 : undefined\n\n        const initial = jamo.initial[i]\n\n        const decomposedMedial = decomposeCompatibilityJamo(jamo.medial[m])\n        const medial = decomposedMedial ?? [jamo.medial[m]]\n\n        if (f !== undefined) {\n            const decomposedFinal = decomposeCompatibilityJamo(jamo.final[f])\n            const final = decomposedFinal ?? [jamo.final[f]]\n\n            return [initial, ...medial, ...final]\n        }\n        return [initial, ...medial]\n    }\n\n    const decomposedCompatibilityJamo = decomposeCompatibilityJamo(block)\n    return decomposedCompatibilityJamo ?? [block]\n}\n\nconst decompose = (blocks: string) => {\n    let result: string[] = []\n    for (let i = 0; i < blocks.length; i++) {\n        const block = blocks[i]\n        result.push(...decomposeBlock(block))\n    }\n    return result\n}\n\nexport {\n    isInitialJamo, isMedialJamo, isFinalJamo,\n    initialJamoOffset, medialJamoOffset, finalJamoOffset,\n    composeJamo, composeSyllable, composeBlock, compose,\n    decomposeCompatibilityJamo, decomposeBlock, decompose\n}","import { keyLookUp, getKeymap } from '~/kime/keylayout'\n\nimport {\n    isInitialJamo, isMedialJamo, isFinalJamo,\n    initialJamoOffset, medialJamoOffset, finalJamoOffset,\n    composeJamo, composeSyllable, composeBlock, compose,\n    decomposeCompatibilityJamo, decomposeBlock, decompose\n} from '~/kime/jamo'\n\nconst kime = {\n    keyLookUp,\n    key: keyLookUp,\n    getKeymap,\n    isInitialJamo, isMedialJamo, isFinalJamo,\n    initialJamoOffset, medialJamoOffset, finalJamoOffset,\n    composeJamo, composeSyllable, composeBlock, compose,\n    decomposeCompatibilityJamo, decomposeBlock, decompose\n}\n\nexport default kime\n\n/* TODO consider group access \n    kime.key...\n    kime.jamo...\n*/"],"names":["layout","getKeymap","enLayout","krLayout","keyLookUp","key","en","kr","buffer","data","jamo","isInitialJamo","j","isMedialJamo","isFinalJamo","initialJamoOffset","medialJamoOffset","finalJamoOffset","composeJamo","prefix","postfix","prefixMap","composeSyllable","initial","medial","final","i","m","f","c","composeBlock","input","cc","buf","p","p2","cm","cf","p3","syl","compose","blocks","maxIterations","result","b","block","rest","decomposeCompatibilityJamo","cjamo","decomposeBlock","code","fc","decompose","kime"],"mappings":"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"}