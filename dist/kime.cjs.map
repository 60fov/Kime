{"version":3,"file":"kime.cjs","sources":["../src/hooks/useKime.ts"],"sourcesContent":["import { type RefObject, useCallback, useEffect, useRef, useState } from \"react\"\nimport kime from \"../kime\"\nimport { jamo, decomposeBlock, compose } from \"../kime/jamo\"\n\n// TODO: clean up\n\nexport interface KimeInput {\n    value: string\n    clear: () => void\n    setValue: (v: string) => void\n}\n\nconst useKime = (\n    // TODO: consider content editable elements\n    inputRef: RefObject<HTMLInputElement>,\n    // options?: AddEventListenerOptions\n    ): { input: KimeInput, composing: boolean } => {\n\n    const [composing, setComposing] = useState(false)\n    const [value, setValue] = useState('')\n\n\n    function dispatchKimeInputEvent(v: string) {\n        inputRef.current?.dispatchEvent(new CustomEvent('kimeinput', {\n            detail: { value: v }\n        }))\n    }\n\n    const onKeyDown = useCallback((e: KeyboardEvent) => {\n        const typedJamo = jamo.single.includes(e.key) ? e.key : kime.keyLookUp(e.key)\n\n        if (typedJamo) {\n            if (e.altKey || e.metaKey || e.ctrlKey) return\n            e.preventDefault()\n            const splitInput = value.split('')\n            if (composing) {\n                // note: block should not be able to be undefined here since composing\n                const block = splitInput.pop() ?? ''\n                const ending = kime.compose([...kime.decompose(block), typedJamo])\n                splitInput.push(...ending)\n                const newValue = splitInput.join('')\n                dispatchKimeInputEvent(newValue)\n            } else {\n                dispatchKimeInputEvent(value + typedJamo)\n                setComposing(true)\n            }\n\n        } else if (e.key.length === 1) {\n            if (e.altKey || e.metaKey || e.ctrlKey) return\n            // TODO: audit e.key.length === 1\n            // is there a non typabled key with a length of 1?\n            e.preventDefault()\n            setComposing(false)\n            dispatchKimeInputEvent(value + e.key)\n\n        } else if (e.key === 'ArrowLeft' || e.key === 'ArrowRight' || e.key === 'ArrowUp' || e.key === 'ArrowDown') {\n            e.preventDefault()\n        } else if (e.key === 'Backspace') {\n            e.preventDefault()\n            // TODO: consider mac vs windows\n            if (e.ctrlKey || e.metaKey) {\n                dispatchKimeInputEvent('')\n            } else {\n                const splitInput = value.split('')\n                const last = splitInput.pop()\n                if (composing && last) {\n                    const dl = decomposeBlock(last)\n                    dl.pop()\n                    if (dl.length) {\n                        splitInput.push(compose(dl).join(''))\n                    } else {\n                        setComposing(false)\n                    }\n                }\n                const newValue = splitInput.join('')\n                dispatchKimeInputEvent(newValue)\n            }\n\n        } else if (e.key === 'Enter') {\n            // TODO: consider submitevent\n            // const event = new CustomEvent('enter', { detail: { value: inputRef.current.value } })\n            // inputRef.current.dispatchEvent(event)\n\n        } else if (e.key === 'Escape') {\n            setComposing(false)\n        }\n        else {\n            // ???\n            // console.log('key???', e.key)\n            // TODO: leave console user feedback note if someone checks this\n        }\n    }, [composing, value])\n\n\n    const onKimeInput = (e: Event) => {\n        const event = e as CustomEvent<{ value: string }>\n        setValue(event.detail.value)\n    }\n\n    const keyDownHandlerRef = useRef(onKeyDown)\n\n    useEffect(() => {\n        keyDownHandlerRef.current = onKeyDown\n    })\n\n    useEffect(() => {\n        const inputElement = inputRef?.current\n        if (!inputElement) return\n\n\n\n        // readonly makes virtual kb not show up\n        // TODO: make readonly param\n        // inputElement.readOnly = true\n\n        const internalKeyDownHandler = (e: KeyboardEvent) => keyDownHandlerRef.current(e)\n        inputElement.addEventListener('keydown', internalKeyDownHandler)\n        inputElement.addEventListener('kimeinput', onKimeInput)\n        return () => {\n            inputElement.removeEventListener('keydown', internalKeyDownHandler)\n            inputElement.removeEventListener('kimeinput', onKimeInput)\n        }\n    }, [])\n\n    return {\n        input: {\n            value,\n            clear: () => setValue(''),\n            setValue\n        },\n        composing\n    }\n\n}\n\nexport default useKime"],"names":["useKime","inputRef","composing","setComposing","useState","value","setValue","dispatchKimeInputEvent","v","_a","onKeyDown","useCallback","typedJamo","jamo","kime","splitInput","block","ending","newValue","last","dl","decomposeBlock","compose","onKimeInput","keyDownHandlerRef","useRef","useEffect","inputElement","internalKeyDownHandler","e"],"mappings":"uEAYMA,EAEFC,GAE+C,CAE/C,KAAM,CAACC,EAAWC,CAAY,EAAIC,WAAS,EAAK,EAC1C,CAACC,EAAOC,CAAQ,EAAIF,WAAS,EAAE,EAGrC,SAASG,EAAuBC,EAAW,QACvCC,EAAAR,EAAS,UAAT,MAAAQ,EAAkB,cAAc,IAAI,YAAY,YAAa,CACzD,OAAQ,CAAE,MAAOD,CAAE,CACtB,CAAA,EACL,CAEM,MAAAE,EAAYC,cAAa,GAAqB,CAChD,MAAMC,EAAYC,EAAA,KAAK,OAAO,SAAS,EAAE,GAAG,EAAI,EAAE,IAAMC,EAAA,KAAK,UAAU,EAAE,GAAG,EAE5E,GAAIF,EAAW,CACX,GAAI,EAAE,QAAU,EAAE,SAAW,EAAE,QAAS,OACxC,EAAE,eAAe,EACX,MAAAG,EAAaV,EAAM,MAAM,EAAE,EACjC,GAAIH,EAAW,CAEL,MAAAc,EAAQD,EAAW,IAAA,GAAS,GAC5BE,EAASH,OAAK,QAAQ,CAAC,GAAGA,OAAK,UAAUE,CAAK,EAAGJ,CAAS,CAAC,EACtDG,EAAA,KAAK,GAAGE,CAAM,EACnB,MAAAC,EAAWH,EAAW,KAAK,EAAE,EACnCR,EAAuBW,CAAQ,CAAA,MAE/BX,EAAuBF,EAAQO,CAAS,EACxCT,EAAa,EAAI,CAGd,SAAA,EAAE,IAAI,SAAW,EAAG,CAC3B,GAAI,EAAE,QAAU,EAAE,SAAW,EAAE,QAAS,OAGxC,EAAE,eAAe,EACjBA,EAAa,EAAK,EACKI,EAAAF,EAAQ,EAAE,GAAG,CAE7B,SAAA,EAAE,MAAQ,aAAe,EAAE,MAAQ,cAAgB,EAAE,MAAQ,WAAa,EAAE,MAAQ,YAC3F,EAAE,eAAe,UACV,EAAE,MAAQ,YAGb,GAFJ,EAAE,eAAe,EAEb,EAAE,SAAW,EAAE,QACfE,EAAuB,EAAE,MACtB,CACG,MAAAQ,EAAaV,EAAM,MAAM,EAAE,EAC3Bc,EAAOJ,EAAW,MACxB,GAAIb,GAAaiB,EAAM,CACb,MAAAC,EAAKC,iBAAeF,CAAI,EAC9BC,EAAG,IAAI,EACHA,EAAG,OACHL,EAAW,KAAKO,UAAQF,CAAE,EAAE,KAAK,EAAE,CAAC,EAEpCjB,EAAa,EAAK,CAE1B,CACM,MAAAe,EAAWH,EAAW,KAAK,EAAE,EACnCR,EAAuBW,CAAQ,CACnC,MAEO,EAAE,MAAQ,SAKV,EAAE,MAAQ,UACjBf,EAAa,EAAK,CAMtB,EACD,CAACD,EAAWG,CAAK,CAAC,EAGfkB,EAAe,GAAa,CAErBjB,EADK,EACC,OAAO,KAAK,CAAA,EAGzBkB,EAAoBC,SAAOf,CAAS,EAE1CgB,OAAAA,EAAAA,UAAU,IAAM,CACZF,EAAkB,QAAUd,CAAA,CAC/B,EAEDgB,EAAAA,UAAU,IAAM,CACZ,MAAMC,EAAe1B,GAAA,YAAAA,EAAU,QAC/B,GAAI,CAAC0B,EAAc,OAQnB,MAAMC,EAA0BC,GAAqBL,EAAkB,QAAQK,CAAC,EACnE,OAAAF,EAAA,iBAAiB,UAAWC,CAAsB,EAClDD,EAAA,iBAAiB,YAAaJ,CAAW,EAC/C,IAAM,CACII,EAAA,oBAAoB,UAAWC,CAAsB,EACrDD,EAAA,oBAAoB,YAAaJ,CAAW,CAAA,CAEjE,EAAG,CAAE,CAAA,EAEE,CACH,MAAO,CACH,MAAAlB,EACA,MAAO,IAAMC,EAAS,EAAE,EACxB,SAAAA,CACJ,EACA,UAAAJ,CAAA,CAGR"}